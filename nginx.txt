正向代理代理的是客户端发送请求，反向代理代理服务端；
正向代理：服务端不认识客户端，不知道是哪个客户端发过来的请求，只知道中间代理
反向代理：客户端不认识服务端，客户端把所有请求发给中间代理，中间代理进行处理决定发送给哪个服务端；

nginx：反向代理，通过配置文件将映射的ip地址映射访问，访问统一的地址即可；

负载均衡：动静分离：
指图片，css，js之类的都交给nginx来处理，nginx处理不了的，比如jsp等等就交给tomcat处理；

nginx解决负载均衡：
ip_hash:通过ip地址标识用户，如果多次请求都是从同一ip来的，那么就分配到同一个tomcat上
处理手段，在upstream最后加上ip_hash就行了。

缺陷：大量请求来自某个局域网，那么相当于没有负载均衡
如果tomcat_1挂了，那么此时nginx只能把请求交给tomcat_8222,但是这里没有记录session，用户体验依然受影响。


用redis存储session：
当tomcat1需要保存session值时，就可以把它放在redis上，需要取时，也从redis上取。
用户提交账号密码行为被分配到tomcat1上，登录信息被存放在redistribution里。
当用户第二次访问的时候，被分配到tomcat8222上
那么此时tomcat8222就会从redis去获取相关信息，一看有对应信息，那么就会登录状态

配置方法：
启动redis
配置jar包
在tomcat配置文件中tomcat/conf/context.xml中添加redis访问ip
重启tomcat

请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则
niginx支持的负载均衡算法：
weight轮询（默认，常用）：接收到请求暗战权重分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列
请求手里情况不会受到任何影响。这种方式下，可以给不同的后端服务器设置一个权重值（weight）用于调整不同的服务器上的请求分配率，权重数据越大，被分配到请求到的几率越大；
ip_hash（常用）：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定的ip地址总会访问到同一个后端服务器，这也在一定程度上解决了集群部署的session共享问题；
fair：智能调整调度算法，动态的根据后端服务器的请求处理和响应时间进行均衡分配，响应时间短处理率高的服务器的请求分配率高；
url_hash：按照访问的url的hash结果分配请求，每个请求的url会只想后端固定的某个服务器；

Nginx性能高：异步非阻塞事件处理，运用epoll模型，提供一个队列排队解决；

WebSocket：
websocket出来前，如果页面要不停地显示最新地数据，那么必须不断刷新页面，或者用一段js代码每隔几秒钟发消息询问服务器数据。
而使用websocket后，当服务器有了新的数据，会主动通知浏览器。
优点：
节约带宽，不停地轮询服务器数据这种方式，使用的是http协议，head信息很大，有效数据占比低，而使用websocket方式，头信息很小
无浪费：轮询方式有可能10次，才碰到服务器数据更新，那么前九次都白轮询浪费掉了
