顺序一致性：从同一个客户端发起的事务请求，最终会严格地按照其发起顺序被应用到zookeeper中去。

CPUvsGPU：GPU核数多，但缓存小，
CPU虽然多核，但每个核都有足够大的缓存和足够多的数字和逻辑运算单元，并辅助有很多加速分支判断甚至更复杂的逻辑判断的硬件；

HTTPS：
客户端发送随机数和支持加密的方案；
服务端发送随机数，选择加密的方式和服务证书链
客户端验证服务证书，并使用证书中的公钥加密premaster secret发送给服务端
服务端使用私钥解密
两端通过client_random，server_random，premaster-secret生成的密钥，用于对称加密后续的通信内容；

Zookeeper三种角色：Leader、Follower、Observer

同步、异步、阻塞、非阻塞
同步请求：A调用B，B的处理是同步的，在处理完之前他不会通知A，只有处理完之后才会明确得通知A；
异步请求：A调用B，B在接收到请求先告诉A我收到了请求，然后异步处理，处理完之后通过回调得方法再通知A；
同步和异步最大的区别是被调用方的执行方式和执行时机，同步指被调用方做完事情之后再返回，异步是指被调用方先返回，然后在做事情，作完后再想办法通知被调用方。

阻塞和非阻塞：
阻塞：A调用B；A一直等待B返回，什么都不干；
非阻塞：A调用B，A不用等B返回，先去忙别的事情；
阻塞和非阻最大的区别就是在被调用方返回结果之前的这段时间内，调用方是否一直等待。阻塞指的是调用方一直等待别的事情什么都不做。非阻塞指的是调用方先去忙别的事情。

阻塞IO（BIO）-一个连接一个线程、同步非阻塞IO（NIO）-一个请求、AIO（异步非阻塞IO）
BIO：同步并阻塞，服务器实现的模式为一个连接一个线程；即客户端有连接请求时服务端就启动一个线程来处理；
Buffer：相比老的IO将数据直接读/写到Stream对象，NIO是将所有数据都用到缓冲区处理，它本质上是一个数组，提供了位置，容器，上线等操作方法。
Channel：如水管一样，支持网络数据从Channel中读写，通道写流最大不同是通道是双向的，而流是一个方向向上移动。
Selector：多路复用选择器提供选择已经就绪的任务的能力，也就是selector会不断轮询注册在其上的通道，如果某个通道发生读写操作，这个通道处于就绪状态，会被selector轮询出来，然后通过selectionKey可以取得就绪的Channel集合，从而进行后续的IO操作；
一个多路复用器可以负责上万个Channel，没有上限，这也是JDK使用epoll代替传统的selector实现，获得连接句柄没有限制，意味着只要一个线程负责selector的轮询，就可以接入成千上万个客户端；

